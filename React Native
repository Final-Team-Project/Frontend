Android Kotlin 
-2017년 구글 I/O 행사 도중, 구글은 안드로이드 앱 구축을 위한 공식 프로그래밍 언어로 코틀린(Kotlin)을 발표
-코틀린의 문법은 안드로이드 앱을 개발하는 데 사용하는 일반적인 언어인 자바와 호환되지는 않는다.

1.-자바 코드와 함께 쉽게 연동해서 사용할 수 있다.
2- 쉬운 유지관리
대부분의 통합개발환경(IDE)은 코틀린을 지원하고 있으며, 따라서 개발자들이 새로운 IDE를 배워야 할 필요가 없기 때문에 생산성을 최적화함
3- 팀 효율성 향상
자바에 비해서 코틀린으로 더 많은 일들을 할 수 있으며, 더 적은 양의 코딩만으로도 안드로이드 애플리케이션을 구축해서 배포할 수 있다


- 아쉬운 점 
1- 컴파일의 기복
2- 채용할 수 있는 인재 풀의 부족
3- 학습 리소스의 제한
4- 코틀린은 아직 자바가 아니다


http://blog.wishket.com/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%95%B1%EA%B0%9C%EB%B0%9C-%EC%99%9C-%EC%BD%94%ED%8B%80%EB%A6%B0kotlin%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C/#1

React Native 
-리액트 네이티브’는 페이스북이 자신들의 필요에 의해서 만든 해커톤(hackathon)프로젝트의 하나로 시작
-웹(web) 개발을 할 때는 반복처리가 신속하게 이뤄지며, 하나의 팀이 제품 전체를 책임지고 개발
-iOS와 안드로이드 환경 모두에서 모바일 앱 개발을 가능



1.- 코드 하나로 IOS와 안드로이드 둘 다 사용할 수 있다. 
2.- 자바스크립트 베이스로 많은 사람들이 사용하고 있다. 

React VS React Native 
React Native는 React의 파워 버젼으로 더 빠르고 ISO 와 안드로이드에 런칭 할 수 있다. 
두 언어 모두 자바스크립드와 스페셜 마크업 언어, JSX 를 섞엉서 쓴다. 
Rect Native는 모바일 유져와 데스크 탑 유저도 사용할 수 있게 한다. 


- 아쉬운 점  

1-IOS 환경에서 개발해야 IOS를 테스트 할 수 있다. 안드로이드만 테스트 툴을 보급 하기 때문에 IOS에서 개발하고 안드로이드에서 테스트 할 수 있지만,
IOS 테스트 툴이 존재 하지 않는다. 

2-IOS 와 안드로이드의 결과가 다르게 나타 날 수 있다. 라이브러리가 약간 다르게 나타남.





Flutter 

-2017년 구글에서 출시. Flutter은 실험적이며 버그를 고치는 프로젝트에 유용. 개발자로 하여금 코드의 변화를 app을 재실행 하지 않고 볼 수 있게 한다. 
-플렛폼 장치를 하나하나 작성해야한다. 
-개발자들이 가장 좋아하는 프론트 언어. 

Xamarin 
-Microsoft에서 출시 75-90% 의 코드를 다른 시스템과 공유할 수 있도록 한다. C#을 사용할 수 있어야 하면 매우 안정적이다. 


<React Native is a great option if your project doesn't require a complicated interface, access to native functions> 


https://www.netguru.com/glossary/react-native#benefits-of-react-native
